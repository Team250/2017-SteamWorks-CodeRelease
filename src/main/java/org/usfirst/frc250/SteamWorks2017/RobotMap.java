// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.SteamWorks2017;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import com.kauailabs.navx.frc.AHRS;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DoubleSolenoid deflectorArmsolenoidDeflectorArm;
    public static DigitalInput deflectorArmarmDownSwitch;
    public static CANTalon driveTraintalonSRXBackLeft;
    public static CANTalon driveTraintalonSRXFrontLeft;
    public static CANTalon driveTraintalonSRXBackRight;
    public static CANTalon driveTraintalonSRXFrontRight;
    public static DoubleSolenoid gearsolenoidGear;
    public static SpeedController intakesparkIntake;
    public static SpeedController outputsparkOutput;
    public static AnalogInput outputultrasonicLeft;
    public static AnalogInput outputultrasonicRight;
    public static Compressor sharedcompressor;
    public static PowerDistributionPanel sharedpowerDistributionPanel;
    public static CANTalon winchtalonSRXWinch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AHRS sharedPurpleSensor;
    public static RoboDrive250 driveTrainmecanumDrive;

    // Constants
    public static boolean kIS_COMPETITION_ROBOT = true;
    public static double kWINCH_RPM_SPEED_CONVERSION = 5.12;
    public static double kINTAKE_NORMAL_SPEED = 1;
    public static double kINTAKE_REVERSE_SPEED = -0.5;
    public static double kOUTPUT_NORMAL_SPEED = 1;
    public static double kOUTPUT_REVERSE_SPEED = -0.5;
    public static double kDEADBAND_WIDTH = 0.05;
    public static boolean kDRIVE_DEBUG = false;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        deflectorArmsolenoidDeflectorArm = new DoubleSolenoid(0, 5, 4);
        LiveWindow.addActuator("DeflectorArm", "solenoidDeflectorArm", deflectorArmsolenoidDeflectorArm);
        
        deflectorArmarmDownSwitch = new DigitalInput(0);
        LiveWindow.addSensor("DeflectorArm", "armDownSwitch", deflectorArmarmDownSwitch);
        
        driveTraintalonSRXBackLeft = new CANTalon(4);
        LiveWindow.addActuator("Drive Train", "talonSRXBackLeft", driveTraintalonSRXBackLeft);
        
        driveTraintalonSRXFrontLeft = new CANTalon(2);
        LiveWindow.addActuator("Drive Train", "talonSRXFrontLeft", driveTraintalonSRXFrontLeft);
        
        driveTraintalonSRXBackRight = new CANTalon(5);
        LiveWindow.addActuator("Drive Train", "talonSRXBackRight", driveTraintalonSRXBackRight);
        
        driveTraintalonSRXFrontRight = new CANTalon(3);
        LiveWindow.addActuator("Drive Train", "talonSRXFrontRight", driveTraintalonSRXFrontRight);
        
        gearsolenoidGear = new DoubleSolenoid(0, 6, 3);
        LiveWindow.addActuator("Gear", "solenoidGear", gearsolenoidGear);
        
        intakesparkIntake = new Spark(0);
        LiveWindow.addActuator("Intake", "sparkIntake", (Spark) intakesparkIntake);
        
        outputsparkOutput = new Spark(1);
        LiveWindow.addActuator("Output", "sparkOutput", (Spark) outputsparkOutput);
        
        outputultrasonicLeft = new AnalogInput(0);
        LiveWindow.addSensor("Output", "ultrasonicLeft", outputultrasonicLeft);
        
        outputultrasonicRight = new AnalogInput(1);
        LiveWindow.addSensor("Output", "ultrasonicRight", outputultrasonicRight);
        
        sharedcompressor = new Compressor(0);
        
        sharedpowerDistributionPanel = new PowerDistributionPanel(0);
        LiveWindow.addSensor("Shared", "powerDistributionPanel", sharedpowerDistributionPanel);
        
        winchtalonSRXWinch = new CANTalon(6);
        LiveWindow.addActuator("Winch", "talonSRXWinch", winchtalonSRXWinch);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        deflectorArmsolenoidDeflectorArm.set(DoubleSolenoid.Value.kReverse);
        driveTrainmecanumDrive = new RoboDrive250(driveTraintalonSRXFrontLeft, driveTraintalonSRXBackLeft, driveTraintalonSRXFrontRight, driveTraintalonSRXBackRight);
        driveTrainmecanumDrive.setSafetyEnabled(true);
        driveTrainmecanumDrive.setExpiration(0.1);
        driveTrainmecanumDrive.setSensitivity(0.5);
        driveTrainmecanumDrive.setMaxOutput(1.0);

        driveTrainmecanumDrive.setInvertedMotor(RoboDrive250.MotorType.kFrontRight, true);
        driveTrainmecanumDrive.setInvertedMotor(RoboDrive250.MotorType.kRearRight, true);

        sharedPurpleSensor = new AHRS (edu.wpi.first.wpilibj.SPI.Port.kMXP);

        winchtalonSRXWinch.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
        winchtalonSRXWinch.reverseSensor(false);
        winchtalonSRXWinch.setEncPosition(0);
        winchtalonSRXWinch.setProfile(0);
        winchtalonSRXWinch.setF(0.0);
        winchtalonSRXWinch.setP(0.1);
        winchtalonSRXWinch.setI(0.0);
        winchtalonSRXWinch.setD(0.0);

        // Set all Talons to Brake Mode
        driveTraintalonSRXFrontLeft.enableBrakeMode(true);
        driveTraintalonSRXFrontRight.enableBrakeMode(true);
        driveTraintalonSRXBackLeft.enableBrakeMode(true);
        driveTraintalonSRXBackRight.enableBrakeMode(true);
        winchtalonSRXWinch.enableBrakeMode(true);

        if (kIS_COMPETITION_ROBOT) {
            //Intake motor is wired backwards on the competition bot
            intakesparkIntake.setInverted(true);
        }
    }
}
