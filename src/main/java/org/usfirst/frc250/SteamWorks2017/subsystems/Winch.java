// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.SteamWorks2017.subsystems;

import org.usfirst.frc250.SteamWorks2017.Robot;
import org.usfirst.frc250.SteamWorks2017.RobotMap;
import org.usfirst.frc250.SteamWorks2017.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.command.Subsystem;


public class Winch extends Subsystem {
    //TODO test distance
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon talonSRXWinch = RobotMap.winchtalonSRXWinch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private double speed = 0;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public Winch() {
        talonSRXWinch.changeControlMode(TalonControlMode.PercentVbus);
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    /**
     * Gets the current draw from the Winch Talon.
     * @return Returns a double as the current draw.
     */
    public double getCurrent() {
        return talonSRXWinch.getOutputCurrent();
    }

    /**
     * Gets the distance that the motor travelled.
     * @return Returns an integer for the distance travelled.
     */
    public double getPosition(){
        return talonSRXWinch.getEncPosition();
    }

    public void setPosition(double target) {
        talonSRXWinch.set(target);
    }
    /**
     * Gets the current speed of the motor.
     * @return Returns an double for the speed of the motor in rpm.
     */
    public double getCurrentSpeed(){
        return talonSRXWinch.getEncVelocity()/RobotMap.kWINCH_RPM_SPEED_CONVERSION;
    }

    /**
     * Gets the Target speed of the motor.
     * @return Returns a double for the target speed of the motor. [-1 to 1]
     */
    public double getTargetSpeed(){
        return speed/RobotMap.kWINCH_RPM_SPEED_CONVERSION;
    }

    /**
     * Sets the target speed that the motor needs to spin at.
     * @param targetSpeed Target speed that the motor should spin at. [-1 to 1]
     */
    public void setTargetSpeed(double targetSpeed){
        if(targetSpeed >= -1 && targetSpeed <= 1) {
            //talonSRXWinch.set(targetSpeed*RobotMap.kWINCH_RPM_SPEED_CONVERSION);
            talonSRXWinch.set(targetSpeed);
        }
    }

    public int getDistance(){
        return talonSRXWinch.getEncPosition();
    }

    public void setPositionMode(boolean enabled) {
        if (enabled) {
            talonSRXWinch.changeControlMode(TalonControlMode.Position);
        }
        else {
            talonSRXWinch.changeControlMode(TalonControlMode.PercentVbus);
        }
    }

    public void resetDistance(){
        talonSRXWinch.setEncPosition(0);
    }
}

