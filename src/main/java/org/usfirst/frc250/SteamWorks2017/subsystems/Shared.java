// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.SteamWorks2017.subsystems;

import org.usfirst.frc250.SteamWorks2017.RobotMap;
import org.usfirst.frc250.SteamWorks2017.Utilities;
import edu.wpi.first.wpilibj.Compressor;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.PowerDistributionPanel;

import edu.wpi.first.wpilibj.command.Subsystem;

public class Shared extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Compressor compressor = RobotMap.sharedcompressor;
    private final PowerDistributionPanel powerDistributionPanel = RobotMap.sharedpowerDistributionPanel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AHRS purpleSensor = RobotMap.sharedPurpleSensor;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    public int startingOrentation = 0;

    public int getStartingOrentation()
    {
        return startingOrentation;
    }

    public void setStartingOrentation(int offset)
    {
        purpleSensor.setAngleAdjustment(offset);
    }

    public double getAngle(){
        return Utilities.formatAngle(purpleSensor.getAngle());
    }

    public void zeroHeading(){
        purpleSensor.zeroYaw();
    }

    public double yawReturn(){
        return purpleSensor.getYaw() + startingOrentation;
    }

    public boolean isTipped() {
        return Math.abs(Utilities.angleDifference(0, purpleSensor.getPitch())) > 10
                || Math.abs(Utilities.angleDifference(0, purpleSensor.getRoll())) > 10;
    }
    public void gyroTest() {
        System.out.println("Pitch: " + Math.round(purpleSensor.getPitch()) + " Roll: "
                + Math.round(purpleSensor.getRoll()) + " Yaw: " + Math.round(purpleSensor.getYaw()));
    }

    public double getTemperature() {
        return (purpleSensor.getTempC()*9/5 + 32);
    }
    
    public boolean isMoving() {
        return purpleSensor.isMoving();
    }
    
    public double getAccelerationX(){
        return purpleSensor.getRawAccelX();
    }

    public double getAccelerationY(){
        return purpleSensor.getRawAccelY();
    }

    public double getVelocityX(){
        return purpleSensor.getVelocityX();
    }
    public double getVelocityY(){
        return purpleSensor.getVelocityY();
    }

    public double getDisplacementX(){
        return purpleSensor.getDisplacementX();
    }
    public double getDisplacementY(){
        return purpleSensor.getDisplacementY();
    }

    public double getAltitude(){
        return purpleSensor.getAltitude();
    }
    public double getBarometricPressure(){
        return purpleSensor.getBarometricPressure();
    }
    public double getCompassHeading(){
        return purpleSensor.getCompassHeading();
    }
}