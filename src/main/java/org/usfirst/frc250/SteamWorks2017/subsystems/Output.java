// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.SteamWorks2017.subsystems;

import org.usfirst.frc250.SteamWorks2017.RobotMap;
import org.usfirst.frc250.SteamWorks2017.commands.*;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Output extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController sparkOutput = RobotMap.outputsparkOutput;
    private final AnalogInput ultrasonicLeft = RobotMap.outputultrasonicLeft;
    private final AnalogInput ultrasonicRight = RobotMap.outputultrasonicRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double speed = 0;
    private int targetDistance = 0;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public double getTargetSpeed(){
        return speed;
    }
    public void setTargetSpeed(double targetSpeed){
        if(targetSpeed <= 1 && targetSpeed >= -1) {
            speed = targetSpeed;
        }
        sparkOutput.set(speed);
    }

    /**
     * Gets the distance of the left ultrasonic sensor.
     * @return Returns left ultrasonic value as an integer.
     */
    public int getLeftUltrasonic(){
        return ultrasonicLeft.getValue();
    }

    /**
     * Gets the distance of the right ultrasonic sensor.
     * @return Returns right ultrasonic value as an integer.
     */
    public int getRightUltrasonic(){
        return ultrasonicRight.getValue();
    }

    /**
     * Sets the Target Distance for the ultrasonic sensors.
     * @param tDistance The target distance to the goal. In ?? units.
     */
    public void setTargetDistance(int tDistance){
        if(tDistance >= 0 && tDistance <= 100000){
            //TODO Set max tDistance
            targetDistance = tDistance;
        }
    }
    public int getTargetDistance(){
        return 0;
        //TODO set getTargetDistance
    }
    public boolean isAtGoal(){
        return false;
        //TODO Set isAtGoal
    }

}

