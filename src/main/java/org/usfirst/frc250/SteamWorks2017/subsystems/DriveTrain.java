// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.SteamWorks2017.subsystems;

import org.usfirst.frc250.SteamWorks2017.Utilities;
import org.usfirst.frc250.SteamWorks2017.RoboDrive250;
import org.usfirst.frc250.SteamWorks2017.Robot;
import org.usfirst.frc250.SteamWorks2017.RobotMap;
import org.usfirst.frc250.SteamWorks2017.commands.*;
import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon talonSRXBackLeft = RobotMap.driveTraintalonSRXBackLeft;
    private final CANTalon talonSRXFrontLeft = RobotMap.driveTraintalonSRXFrontLeft;
    private final CANTalon talonSRXBackRight = RobotMap.driveTraintalonSRXBackRight;
    private final CANTalon talonSRXFrontRight = RobotMap.driveTraintalonSRXFrontRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final RoboDrive250 mecanumDrive = RobotMap.driveTrainmecanumDrive;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());

    }
    public void driveCartesian(double x, double y, double rotation) {
        driveCartesian( x, y, rotation,Robot.shared.getAngle());

    }

    public void driveCartesian(double x, double y, double rotation, double gyroAngle) {
        if ((x <= 1 && x >= -1) && (y <= 1 && y >= -1) && (rotation <= 1 && rotation >= -1)) {
            mecanumDrive.mecanumDrive_Cartesian(x, y, rotation, gyroAngle);
        }
        // Selectable debug code
        if (RobotMap.kDRIVE_DEBUG) {
            System.out.println("DriveCartesian x:" + x + " Y:" + y + " Rotation:" + rotation + " GyroAngle:" + gyroAngle);
        }
    }

    public void driveCartesianCorrected(double x, double y, double rotation){
        if((x <= 1 && x >= -1)&&(y <= 1 && y >= -1)&&(rotation <= 1 && rotation >= -1)){
            mecanumDrive.mecanumDrive_Cartesian_corrected(x,y,rotation, Robot.shared.getAngle());
        }
        // Selectable debug code
        if (RobotMap.kDRIVE_DEBUG) {
            System.out.println("DriveCartesianCorrected x:" + x + " Y:" + y + " Rotation:" + rotation);
        }
    }

    public void SpinTowardsAngle (double angle, double tolerance){
        double angleDelta = Utilities.angleDifference(angle, Robot.shared.getAngle());
        double twist = 0;
        double minimumTwist = .2;

        if (! isAtAngle(angle, tolerance)){
            if (angleDelta > 90 ){
                twist = 1;
            }
            else if (angleDelta < -90){
                twist = -1;
            }
            else {
                if(angleDelta < 0) {
                    twist = Math.min(angleDelta / 90, -minimumTwist);
                }
                else
                {
                    twist = Math.max(angleDelta / 90, minimumTwist);
                }
            }
            Robot.driveTrain.driveCartesian(0 , 0 , twist);
        }
        else
        {
            Robot.driveTrain.driveCartesian(0 , 0 , 0);
        }
    }

    public boolean isAtAngle(double angle, double tolerance){
        double angleDelta = Utilities.angleDifference(angle, Robot.shared.getAngle());
        if (Math.abs(angleDelta) > tolerance){
            return false;
        }
        else
        {
            return true;
        }
    }
}

