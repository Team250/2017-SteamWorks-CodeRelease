// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.SteamWorks2017;

import org.usfirst.frc250.SteamWorks2017.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton manipAButton;
    public JoystickButton manipBButton;
    public JoystickButton manipYButton;
    public JoystickButton manipButtonStart;
    public JoystickButton manipButtonBack;
    public Joystick manipJoy;
    public JoystickButton manualClimb;
    public Joystick driverJoy;

    //public JoystickButton testAuton;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driverJoy = new Joystick(1);
        
        manualClimb = new JoystickButton(driverJoy, 2);
        manualClimb.whenPressed(new StartWinch());

        manipJoy = new Joystick(0);
        
        manipButtonBack = new JoystickButton(manipJoy, 7);
        manipButtonBack.whenPressed(new OutputReverse());
        manipButtonStart = new JoystickButton(manipJoy, 8);
        manipButtonStart.whenPressed(new IntakeReverse());
        manipYButton = new JoystickButton(manipJoy, 4);
        manipYButton.whenPressed(new OutputToggle());
        manipBButton = new JoystickButton(manipJoy, 2);
        manipBButton.whenPressed(new GearToggle());
        manipAButton = new JoystickButton(manipJoy, 1);
        manipAButton.whenPressed(new IntakeToggle());

        // SmartDashboard Buttons
        SmartDashboard.putData("Gear Open", new GearOpen());
        SmartDashboard.putData("Gear Close", new GearClose());
        SmartDashboard.putData("Intake Start", new IntakeStart());
        SmartDashboard.putData("Intake Stop", new IntakeStop());
        SmartDashboard.putData("Intake Reverse", new IntakeReverse());
        SmartDashboard.putData("Output Start", new OutputStart());
        SmartDashboard.putData("Output Stop", new OutputStop());
        SmartDashboard.putData("Output Reverse", new OutputReverse());
        SmartDashboard.putData("Start Winch", new StartWinch());
        SmartDashboard.putData("Stop Winch", new StopWinch());
        SmartDashboard.putData("Drive To Angle: targetAngle", new DriveToAngle(0));
        SmartDashboard.putData("TurnToGearReloadAngle", new TurnToGearReloadAngle());
        SmartDashboard.putData("Auton Center Peg", new AutonCenterPeg());
        SmartDashboard.putData("Auton Cross Line", new AutonCrossLine());
        SmartDashboard.putData("Auton Left Side Peg", new AutonLeftPeg());
        SmartDashboard.putData("Auton Right Side Peg", new AutonRightPeg());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        manipButtonBack.whenReleased(new OutputStop());
        manipButtonStart.whenReleased(new IntakeStop());
        manualClimb.whenReleased(new StopWinch());
        SmartDashboard.putData("PrintPrefs", new PrintPrefs());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getManipJoy() {
        return manipJoy;
    }

    public Joystick getDriverJoy() {
        return driverJoy;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

