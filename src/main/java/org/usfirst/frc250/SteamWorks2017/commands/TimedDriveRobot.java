// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.SteamWorks2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc250.SteamWorks2017.Robot;

/**
 * Allow Timed robot-oriented drive actions to be specified as a
 * combination of Prefs and hard coded values
 */
public class TimedDriveRobot extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_x;
    private double m_y;
    private double m_time;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private String s_x;
    private String s_y;
    private String s_time;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TimedDriveRobot(double x, double y, double time) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_x = x;
        m_y = y;
        m_time = time;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    public TimedDriveRobot(String x, String y, String time){
        s_x = x;
        s_y = y;
        s_time = time;
        requires(Robot.driveTrain);
    }

    public TimedDriveRobot(int x, String y, String time){
        m_x = x;
        s_y = y;
        s_time = time;
        requires(Robot.driveTrain);
    }

    public TimedDriveRobot(String x, int y, String time){
        s_x = x;
        m_y = y;
        s_time = time;
        requires(Robot.driveTrain);
    }

    private void updateParams()
    {
        if(s_x != null){
            m_x = Robot.prefs2.getDouble(s_x);
        }

        if(s_y != null){
            m_y = Robot.prefs2.getDouble(s_y);
        }

        if(s_time != null){
            m_time = Robot.prefs2.getDouble(s_time);
        }
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        updateParams();
        setTimeout(m_time);
        System.out.println("Start TimedDriveRobot - Time: " + m_time + " X: " + m_x + " Y: " + m_y);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Robot.driveTrain.driveCartesian(m_x,m_y,0, 0);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if(isTimedOut()) { System.out.println("End TimedDriveRobot - Time: " + m_time + " X: " + m_x + " Y: " + m_y);}
        return isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.driveTrain.driveCartesian(0,0,0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
